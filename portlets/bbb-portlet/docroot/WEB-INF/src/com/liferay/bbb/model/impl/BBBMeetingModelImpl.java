/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.bbb.model.impl;

import com.liferay.bbb.model.BBBMeeting;
import com.liferay.bbb.model.BBBMeetingModel;
import com.liferay.bbb.model.BBBMeetingSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.User;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.service.UserLocalServiceUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the BBBMeeting service. Represents a row in the &quot;BBBMeeting&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.bbb.model.BBBMeetingModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link BBBMeetingImpl}.
 * </p>
 *
 * @author Shinn Lok
 * @see BBBMeetingImpl
 * @see com.liferay.bbb.model.BBBMeeting
 * @see com.liferay.bbb.model.BBBMeetingModel
 * @generated
 */
@JSON(strict = true)
public class BBBMeetingModelImpl extends BaseModelImpl<BBBMeeting>
	implements BBBMeetingModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a b b b meeting model instance should use the {@link com.liferay.bbb.model.BBBMeeting} interface instead.
	 */
	public static final String TABLE_NAME = "BBBMeeting";
	public static final Object[][] TABLE_COLUMNS = {
			{ "bbbMeetingId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "bbbServerId", Types.BIGINT },
			{ "name", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "attendeePassword", Types.VARCHAR },
			{ "moderatorPassword", Types.VARCHAR },
			{ "status", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table BBBMeeting (bbbMeetingId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,bbbServerId LONG,name VARCHAR(75) null,description STRING null,attendeePassword VARCHAR(75) null,moderatorPassword VARCHAR(75) null,status INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table BBBMeeting";
	public static final String ORDER_BY_JPQL = " ORDER BY bbbMeeting.createDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY BBBMeeting.createDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.bbb.model.BBBMeeting"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.bbb.model.BBBMeeting"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.bbb.model.BBBMeeting"),
			true);
	public static long BBBSERVERID_COLUMN_BITMASK = 1L;
	public static long GROUPID_COLUMN_BITMASK = 2L;
	public static long STATUS_COLUMN_BITMASK = 4L;
	public static long CREATEDATE_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static BBBMeeting toModel(BBBMeetingSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		BBBMeeting model = new BBBMeetingImpl();

		model.setBbbMeetingId(soapModel.getBbbMeetingId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setBbbServerId(soapModel.getBbbServerId());
		model.setName(soapModel.getName());
		model.setDescription(soapModel.getDescription());
		model.setAttendeePassword(soapModel.getAttendeePassword());
		model.setModeratorPassword(soapModel.getModeratorPassword());
		model.setStatus(soapModel.getStatus());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<BBBMeeting> toModels(BBBMeetingSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<BBBMeeting> models = new ArrayList<BBBMeeting>(soapModels.length);

		for (BBBMeetingSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.bbb.model.BBBMeeting"));

	public BBBMeetingModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _bbbMeetingId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setBbbMeetingId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _bbbMeetingId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return BBBMeeting.class;
	}

	@Override
	public String getModelClassName() {
		return BBBMeeting.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("bbbMeetingId", getBbbMeetingId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("bbbServerId", getBbbServerId());
		attributes.put("name", getName());
		attributes.put("description", getDescription());
		attributes.put("attendeePassword", getAttendeePassword());
		attributes.put("moderatorPassword", getModeratorPassword());
		attributes.put("status", getStatus());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long bbbMeetingId = (Long)attributes.get("bbbMeetingId");

		if (bbbMeetingId != null) {
			setBbbMeetingId(bbbMeetingId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long bbbServerId = (Long)attributes.get("bbbServerId");

		if (bbbServerId != null) {
			setBbbServerId(bbbServerId);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		String attendeePassword = (String)attributes.get("attendeePassword");

		if (attendeePassword != null) {
			setAttendeePassword(attendeePassword);
		}

		String moderatorPassword = (String)attributes.get("moderatorPassword");

		if (moderatorPassword != null) {
			setModeratorPassword(moderatorPassword);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}
	}

	@JSON
	@Override
	public long getBbbMeetingId() {
		return _bbbMeetingId;
	}

	@Override
	public void setBbbMeetingId(long bbbMeetingId) {
		_bbbMeetingId = bbbMeetingId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_columnBitmask = -1L;

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getBbbServerId() {
		return _bbbServerId;
	}

	@Override
	public void setBbbServerId(long bbbServerId) {
		_columnBitmask |= BBBSERVERID_COLUMN_BITMASK;

		if (!_setOriginalBbbServerId) {
			_setOriginalBbbServerId = true;

			_originalBbbServerId = _bbbServerId;
		}

		_bbbServerId = bbbServerId;
	}

	public long getOriginalBbbServerId() {
		return _originalBbbServerId;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@JSON
	@Override
	public String getAttendeePassword() {
		if (_attendeePassword == null) {
			return StringPool.BLANK;
		}
		else {
			return _attendeePassword;
		}
	}

	@Override
	public void setAttendeePassword(String attendeePassword) {
		_attendeePassword = attendeePassword;
	}

	@JSON
	@Override
	public String getModeratorPassword() {
		if (_moderatorPassword == null) {
			return StringPool.BLANK;
		}
		else {
			return _moderatorPassword;
		}
	}

	@Override
	public void setModeratorPassword(String moderatorPassword) {
		_moderatorPassword = moderatorPassword;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public int getOriginalStatus() {
		return _originalStatus;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			BBBMeeting.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public BBBMeeting toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (BBBMeeting)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		BBBMeetingImpl bbbMeetingImpl = new BBBMeetingImpl();

		bbbMeetingImpl.setBbbMeetingId(getBbbMeetingId());
		bbbMeetingImpl.setGroupId(getGroupId());
		bbbMeetingImpl.setCompanyId(getCompanyId());
		bbbMeetingImpl.setUserId(getUserId());
		bbbMeetingImpl.setUserName(getUserName());
		bbbMeetingImpl.setCreateDate(getCreateDate());
		bbbMeetingImpl.setModifiedDate(getModifiedDate());
		bbbMeetingImpl.setBbbServerId(getBbbServerId());
		bbbMeetingImpl.setName(getName());
		bbbMeetingImpl.setDescription(getDescription());
		bbbMeetingImpl.setAttendeePassword(getAttendeePassword());
		bbbMeetingImpl.setModeratorPassword(getModeratorPassword());
		bbbMeetingImpl.setStatus(getStatus());

		bbbMeetingImpl.resetOriginalValues();

		return bbbMeetingImpl;
	}

	@Override
	public int compareTo(BBBMeeting bbbMeeting) {
		int value = 0;

		value = DateUtil.compareTo(getCreateDate(), bbbMeeting.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof BBBMeeting)) {
			return false;
		}

		BBBMeeting bbbMeeting = (BBBMeeting)obj;

		long primaryKey = bbbMeeting.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		BBBMeetingModelImpl bbbMeetingModelImpl = this;

		bbbMeetingModelImpl._originalGroupId = bbbMeetingModelImpl._groupId;

		bbbMeetingModelImpl._setOriginalGroupId = false;

		bbbMeetingModelImpl._originalBbbServerId = bbbMeetingModelImpl._bbbServerId;

		bbbMeetingModelImpl._setOriginalBbbServerId = false;

		bbbMeetingModelImpl._originalStatus = bbbMeetingModelImpl._status;

		bbbMeetingModelImpl._setOriginalStatus = false;

		bbbMeetingModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<BBBMeeting> toCacheModel() {
		BBBMeetingCacheModel bbbMeetingCacheModel = new BBBMeetingCacheModel();

		bbbMeetingCacheModel.bbbMeetingId = getBbbMeetingId();

		bbbMeetingCacheModel.groupId = getGroupId();

		bbbMeetingCacheModel.companyId = getCompanyId();

		bbbMeetingCacheModel.userId = getUserId();

		bbbMeetingCacheModel.userName = getUserName();

		String userName = bbbMeetingCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			bbbMeetingCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			bbbMeetingCacheModel.createDate = createDate.getTime();
		}
		else {
			bbbMeetingCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			bbbMeetingCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			bbbMeetingCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		bbbMeetingCacheModel.bbbServerId = getBbbServerId();

		bbbMeetingCacheModel.name = getName();

		String name = bbbMeetingCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			bbbMeetingCacheModel.name = null;
		}

		bbbMeetingCacheModel.description = getDescription();

		String description = bbbMeetingCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			bbbMeetingCacheModel.description = null;
		}

		bbbMeetingCacheModel.attendeePassword = getAttendeePassword();

		String attendeePassword = bbbMeetingCacheModel.attendeePassword;

		if ((attendeePassword != null) && (attendeePassword.length() == 0)) {
			bbbMeetingCacheModel.attendeePassword = null;
		}

		bbbMeetingCacheModel.moderatorPassword = getModeratorPassword();

		String moderatorPassword = bbbMeetingCacheModel.moderatorPassword;

		if ((moderatorPassword != null) && (moderatorPassword.length() == 0)) {
			bbbMeetingCacheModel.moderatorPassword = null;
		}

		bbbMeetingCacheModel.status = getStatus();

		return bbbMeetingCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(27);

		sb.append("{bbbMeetingId=");
		sb.append(getBbbMeetingId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", bbbServerId=");
		sb.append(getBbbServerId());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", attendeePassword=");
		sb.append(getAttendeePassword());
		sb.append(", moderatorPassword=");
		sb.append(getModeratorPassword());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(43);

		sb.append("<model><model-name>");
		sb.append("com.liferay.bbb.model.BBBMeeting");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>bbbMeetingId</column-name><column-value><![CDATA[");
		sb.append(getBbbMeetingId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>bbbServerId</column-name><column-value><![CDATA[");
		sb.append(getBbbServerId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>attendeePassword</column-name><column-value><![CDATA[");
		sb.append(getAttendeePassword());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>moderatorPassword</column-name><column-value><![CDATA[");
		sb.append(getModeratorPassword());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = BBBMeeting.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			BBBMeeting.class
		};
	private long _bbbMeetingId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private long _bbbServerId;
	private long _originalBbbServerId;
	private boolean _setOriginalBbbServerId;
	private String _name;
	private String _description;
	private String _attendeePassword;
	private String _moderatorPassword;
	private int _status;
	private int _originalStatus;
	private boolean _setOriginalStatus;
	private long _columnBitmask;
	private BBBMeeting _escapedModel;
}