apply from: "${gradle.lfrSdkDir}/versions.gradle"

Closure commonProjectCondition
Closure commonProjects
Closure configureProjects
Closure pluginProjectCondition
Closure pluginProjects

commonProjectCondition = {
	true
}

commonProjects = {
	apply from: "${gradle.lfrSdkDir}/util.gradle"

	configurations {
		all {
			resolutionStrategy.cacheChangingModulesFor 15, 'minutes'
		}
	}

	repositories {
		maven {
			url "http://cdn.repository.liferay.com/nexus/content/groups/public"
		}
	}
}

configureProjects = {
	Closure projectCondition, Closure projectConfig ->

	gradle.beforeProject {
		if (!projectCondition(it)) {
			return
		}

		configure(it, projectConfig)
	}
}

pluginProjectCondition = {
	it.exists("build.gradle") && it.parent
}

pluginProjects = {
	Closure readConfigurations
	Closure setExtProperties

	readConfigurations = {

		// bnd.bnd

		project.ext.bndProperties = new Properties()

		File bndPropertiesFile = project.file("bnd.bnd")

		if (bndPropertiesFile.exists()) {
			InputStream inputStream = new FileInputStream(bndPropertiesFile)

			inputStream.withStream {
				bndProperties.load(it)
			}
		}

		// liferay-plugin-package.properties

		project.ext.pluginPackageProperties = new Properties()

		File pluginPackagePropertiesFile = project.file("docroot/WEB-INF/liferay-plugin-package.properties")

		if (pluginPackagePropertiesFile.exists()) {
			InputStream inputStream = new FileInputStream(pluginPackagePropertiesFile)

			inputStream.withStream {
				pluginPackageProperties.load(it)
			}
		}
	}

	setExtProperties = {

		// osgiPlugin

		project.ext.osgiPlugin = project.exists("bnd.bnd")

		// pluginSrcDir

		project.ext.pluginSrcDir = project.file("docroot/WEB-INF/src")

		if (!project.pluginSrcDir.exists()) {
			project.pluginSrcDir = project.file("src")
		}
	}

	readConfigurations()

	setExtProperties()

	apply from: "${gradle.lfrSdkDir}/build-plugins.gradle"

	if (name.endsWith("-theme")) {
		apply from: "${gradle.lfrSdkDir}/build-themes.gradle"
	}
}

configureProjects(commonProjectCondition, commonProjects)

configureProjects(pluginProjectCondition, pluginProjects)